name: Deploy to Azure Container App

env:
  AZURE_CONTAINER_APP_NAME: dfberrycontainerapp
  AZURE_GROUP_NAME: rust-axum-server
  AZURE_CONTAINER_REGISTRY: dfberryregistry
  IMAGE_NAME: server-source-board-rust
on:
  workflow_dispatch:    

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Print out app version
        run: |
          VERSION=$(grep '^version' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "APP_VERSION=${VERSION}" >>${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Lowercase the repo name and username
        run: echo "REPO_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to Azure Container Registry
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          push: true
          tags: |
            ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract repository name
        id: extract_repo
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Deploy to containerapp
        uses: azure/cli@089eac9d8cc39f5d003e94f8b65efc51076c9cbd
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp registry set -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --server ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }} --username ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
            az containerapp update -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --image ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Validate the deployment
  validate: 
    runs-on: ubuntu-latest
    needs: deploy

    steps:

      - name: Checkout to the branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683


      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Wait for 2 minutes
        run: sleep 120

      - name: Validate the deployment
        run: |
          cd scripts
          chmod +x check-revision.sh
          ./check-revision.sh

  smoke-test:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # with:
      #   repository: dfberry/rust-axum-server # Replace with the repository you want to clone
      #   token: ${{ secrets.GITHUB_TOKEN }} # Used in test to mock user's token

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Specify the Node.js version you need

    - name: Install and run Jest tests
      env:
        PAT_READ_ONLY: ${{ secrets.PAT }} # Use for /config querystring parameter
        ADMIN_KEY: ${{ secrets.ADMIN_KEY }} # Use for /config querystring parameter
        BASE_URL: ${{ secrets.DEPLOYED_API_URL }} # Retrieve the API URL from secrets
        FAIL_ON_PURPOSE: ${{ secrets.FAIL_ON_PURPOSE }} # Retrieve the fail on purpose flag from secrets
      run: |
        cd tests
        npm install
        npm test -- --runInBand --testTimeout=10000
